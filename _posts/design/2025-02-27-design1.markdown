---
layout: content-layout
title: "디자인 패턴 익혀두기! 첫 번째 전략 패턴! 🧐"
date: 2025-02-27
categories: [dev]
tags: [디자인패턴, design pattern, 헤드퍼스트, GoF, 전략 패턴, Strategy Pattern]
---

## 안녕하십니까! 😀

오늘도 블로그 글을 작성하러 돌아왔습니다!

개발자 일을 하면서 디자인 패턴에 대한 이야기를 많이 들었는데요.

옵저버 패턴... 팩토리 패턴... 음... 기억이 가물가물하네요...

AI도 빠르게 진화하는 시대에 저 또한 버전을 올릴 필요성이 있다고 봅니다. 🤯

디자인 패턴에 대한 강의나 책 등 아주 많이 있는데요..!

저는 헤드퍼스트의 디자인패턴 책으로 구매하여 훑어봤습니다.

[헤드퍼스트 디자인패턴](https://product.kyobobook.co.kr/detail/S000001810483)

관심 있으신 분은 위에 교보문고 링크 달아놓았습니다. 😇

서론이 길었네요. 책에 처음 등장하는 전략 패턴부터 한 번 살펴보시죠~

---

책에서는 오리의 다양한 행동을 어떻게 분리하여 구현할 것인지 소개하며 객체지향 원칙에 대해 우선 설명하고 있습니다!

### 객체지향 원칙

- **바뀌는 부분은 캡슐화 한다.**

✏️ <span style="color: red;">캡슐화란? 객체의 데이터(속성)와 동작(메서드)을 하나의 단위로 묶고, 외부에서 직접 접근하지 못하도록 제한하는 개념</span>

~~쉽게 얘기해서 기능별로 클래스 잘 분리해라랄까..?~~

- **상속보다는 구성을 활용한다.**

✏️ <span style="color: red;">구성이란? 클래스가 다른 클래스를 필드(멤버 변수)로 포함하여 기능을 조합하는 방식</span>

~~쉽게 얘기해서 'A에는 B가 있다. (has a)' 라는 관계랄까...?~~

- **구현보다는 인터페이스에 맞춰서 프로그래밍한다.**

~~쉽게 얘기해서 인터페이스 잘 만들어라랄까....?~~

사실 위 말들이 개발할 때 뇌에 쏙 박히지는 않을 것 같습니다... 😭

계속 반복하여 되뇌일 수 밖에...

다시 전략 패턴 이야기로 돌아와서 아래 클래스 다이어그램을 한 번 보시죠! 😕

![Imgur](https://i.imgur.com/Iu9MJSo.png)

책에 나온 다이어그램을 약간 간소화해서 그려봤습니다.

이 다이어그램에서 전략 패턴의 향기를 맡기란 처음에 쉽지 않았습니다.

✏️ <span style="color: red;">전략 패턴이란? 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해줍니다.</span>

다이어그램에 보시면 오리(Duck) 클래스에 FlyBehavior(나는 행동)과 QuackBehavior(우는 행동) 클래스가 선언되어 있습니다.

**오리라는 객체로부터 두 개의 행위를 각각 알고리즘군으로 분리시켰기에...** 전략 패턴이 사용되었구나... 라고 인지하셔야 될 듯 합니다.

그리고 또한 위에 객체지향 원칙을 찾아볼 수 있는데요!

1. 바뀔만한 부분을 하위 클래스로 분리하여 캡슐화를 진행하였구요!

2. 나는 행동과 우는 행동을 분리하여 오리 클래스로부터 <span style="color: blue;">구성 관계</span>를 가짐으로써 느슨한 결합을 만들었습니다.

저도 책을 보면서 생각하니까 이렇게 보이지... 아직 디자인 하수이기에... 급한 개발 건은 흔히 **스파게티 코드**로 구현이 될 듯 하네요... 😱

생각해보면 개발하면서 무의식적으로 전략 패턴을 구사하고 있지 않았나? 싶기도 합니다! ~~(는 아직 멀었다...)~~

간단한 전략 패턴 예제를 살펴 보며 마무리하도록 하겠습니다! (이건 책에 없는 GPT와 제 생각입니다...)

### ✔ 전략패턴 예제: 결제 시스템

#### 클래스 다이어그램
![Imgur](https://i.imgur.com/4gLpLDs.png)

#### 전략 인터페이스 정의
```
// 전략 인터페이스: 결제 방식 정의
interface PaymentStrategy {
    void pay(int amount);
}
```
#### 구체적인 결제 방법 구현
```
// 신용카드 결제 전략
class CreditCardPayment implements PaymentStrategy {
    private String cardNumber;

    public CreditCardPayment(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    @Override
    public void pay(int amount) {
        System.out.println(amount + "원을 신용카드(" + cardNumber + ")로 결제합니다.");
    }
}

// 페이팔 결제 전략
class PayPalPayment implements PaymentStrategy {
    private String email;

    public PayPalPayment(String email) {
        this.email = email;
    }

    @Override
    public void pay(int amount) {
        System.out.println(amount + "원을 페이팔 계정(" + email + ")으로 결제합니다.");
    }
}

// 암호화폐 결제 전략
class CryptoPayment implements PaymentStrategy {
    private String walletAddress;

    public CryptoPayment(String walletAddress) {
        this.walletAddress = walletAddress;
    }

    @Override
    public void pay(int amount) {
        System.out.println(amount + "원을 암호화폐 지갑(" + walletAddress + ")에서 결제합니다.");
    }
}
```
#### 결제 컨텍스트 구현
```
// 컨텍스트 클래스: 결제 수단을 동적으로 설정 가능
class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    // 전략(결제 방식) 설정
    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    // 결제 실행
    public void checkout(int amount) {
        if (paymentStrategy == null) {
            throw new IllegalStateException("결제 방법이 설정되지 않았습니다.");
        }
        paymentStrategy.pay(amount);
    }
}
```
#### 실행할 MAIN 클래스
```
public class Main {
    public static void main(String[] args) {
        ShoppingCart cart = new ShoppingCart();

        // 신용카드 결제
        cart.setPaymentStrategy(new CreditCardPayment("1234-5678-9012-3456"));
        cart.checkout(10000);

        // 페이팔 결제
        cart.setPaymentStrategy(new PayPalPayment("user@example.com"));
        cart.checkout(20000);

        // 암호화폐 결제
        cart.setPaymentStrategy(new CryptoPayment("0xABC123DEF456"));
        cart.checkout(30000);
    }
}
```
#### 실행 결과
```
10000원을 신용카드(1234-5678-9012-3456)로 결제합니다.
20000원을 페이팔 계정(user@example.com)으로 결제합니다.
30000원을 암호화폐 지갑(0xABC123DEF456)에서 결제합니다.
```

다음에는 다른 패턴으로 돌아오겠습니다!

긴 글 봐주셔서 감사합니다! 😌