---
layout: content-layout
title: "객체들에게 연락돌리는 옵저버 패턴! 📞"
date: 2025-03-01
categories: [dev]
tags: [디자인패턴, Design pattern, 헤드퍼스트, GoF, 옵저버 패턴, Observer Pattern]
---

## 디자인 패턴 분석 목차

> 1: [디자인 패턴 익혀두기! 첫 번째 전략 패턴! 🧐](/dev/2025/02/27/design1.html)

> 2: [객체들에게 연락돌리는 옵저버 패턴! 📞](/dev/2025/03/01/design2.html)

## 참고 서적

[헤드퍼스트 디자인패턴](https://product.kyobobook.co.kr/detail/S000001810483)

---

## 안녕하십니까! 😀

두 번째 디자인 패턴을 기억하기 위해 키보드를 잡았습니다!

거두절미하고 옵저버 패턴 한 번 되뇌이며 적어보겠습니다.

---

옵저버 패턴.. ~~(스타크래프트를 해봤다면 옵저버는 잘 알고 있죠...)~~

책을 읽기 전 관찰자 역할을 하는 패턴임은 머리 속에 기억하고 있습니다.

요즘 들어서는 옵저버 패턴 -> KAFKA 느낌도 많이 받습니다. (✂️ GPT가 아니라고 합니다.)

근데 이걸 어떻게 구현하더라... 👽

일단 이론을 좀 더 파악하면 옵저버 패턴은 다음과 같습니다.

✏️ <span style="color: red;">옵저버 패턴 = 신문사(주제) + 구독자(옵저버)</span>

특수한 주제에 대해 옵저버들은 전달을 받을 수 있고 옵저버들은 각자 입맛에 맞게 주제에 대해 가공이 가능합니다.

고로 <span style="background-color:rgb(200, 200, 255);">일대다 관계</span>가 성립되는 패턴이라고 볼 수 있습니다!

### 새로 배우는 디자인 원칙

✏️ <span style="color: red;">상호작용하는 개체 사이에서는 느슨한 결합을 사용해라!? 느슨한 결합은 객체 사이의 상호의존성을 낮춘다.</span>

옵저버 패턴은 느슨한 결합을 사용하는 패턴 중 하나라고 합니다!

🧑‍🏫 **여기서 질문**❗ **자바에서 사용하는 옵저버 패턴은**❓ **SWING 라이브러리 > ActionListener**

**SWING에 구현된 addActionListener를 적용하면 JButton 등에서 이벤트 발생시 리스너(옵저버)들을 호출하게 됩니다.**

옵저버 패턴을 이해하기 위해 클래스 다이어그램과 소스 코드의 예시를 한 번 보시죠!

---

### ✔ 옵저버 패턴 예제: 기상 시스템

#### 클래스 다이어그램

![Imgur](https://i.imgur.com/rVHtF6B.png)

#### 주제 인터페이스
```
interface Subject {
    void addObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}
```

#### 옵저버 인터페이스
```
interface Observer {
    void update(float temperature, float humidity, float pressure);
}
```

#### 기상스테이션 클래스 (신문사 주제)
```
class WeatherStation implements Subject {
    private final List<Observer> observers = new ArrayList<>();
    private float temperature;
    private float humidity;
    private float pressure;

    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature, humidity, pressure);
        }
    }

    // 날씨 데이터 변경 메서드
    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        notifyObservers();
    }
}
```

#### 일반 날씨 디스플레이 클래스 (구독자1 옵저버)
```
class WeatherDisplay implements Observer {
    private final String name;

    public WeatherDisplay(String name) {
        this.name = name;
    }

    @Override
    public void update(float temperature, float humidity, float pressure) {
        System.out.println(name + " - 온도: " + temperature + "°C, 습도: " + humidity + "%, 기압: " + pressure + " hPa");
    }
}
```

#### 통계 디스플레이 클래스 (구독자2 옵저버)
```
class StatisticsDisplay implements Observer {
    private float maxTemp = Float.MIN_VALUE;
    private float minTemp = Float.MAX_VALUE;
    private float tempSum = 0.0f;
    private int numReadings = 0;

    @Override
    public void update(float temperature, float humidity, float pressure) {
        tempSum += temperature;
        numReadings++;

        if (temperature > maxTemp) {
            maxTemp = temperature;
        }

        if (temperature < minTemp) {
            minTemp = temperature;
        }

        System.out.println("📊 통계 디스플레이 - 최고 온도: " + maxTemp + "°C, 최저 온도: " + minTemp + "°C, 평균 온도: " + (tempSum / numReadings) + "°C");
    }
}
```

#### 실행 클래스
```
public class ObserverPatternExample {
    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();

        // 옵저버 생성 및 등록
        WeatherDisplay display1 = new WeatherDisplay("디스플레이 1");
        StatisticsDisplay display2 = new StatisticsDisplay(); // 새로운 통계 디스플레이
        
        weatherStation.addObserver(display1);
        weatherStation.addObserver(display2);

        // 날씨 정보 업데이트 (옵저버들에게 알림)
        weatherStation.setMeasurements(25.5f, 65.0f, 1013.1f);
        weatherStation.setMeasurements(22.3f, 70.0f, 1012.8f);

        // 옵저버 제거 후 다시 업데이트
        weatherStation.removeObserver(display1);
        weatherStation.setMeasurements(20.0f, 75.0f, 1012.5f);
    }
}
```

#### 실행 결과
```
디스플레이 1 - 현재 온도: 25.5°C, 습도: 65.0%, 기압: 1013.1 hPa
📊 통계 디스플레이 - 최고 온도: 25.5°C, 최저 온도: 25.5°C, 평균 온도: 25.5°C
디스플레이 1 - 현재 온도: 22.3°C, 습도: 70.0%, 기압: 1012.8 hPa
📊 통계 디스플레이 - 최고 온도: 25.5°C, 최저 온도: 22.3°C, 평균 온도: 23.9°C
📊 통계 디스플레이 - 최고 온도: 25.5°C, 최저 온도: 20.0°C, 평균 온도: 22.6°C
```

#### 대략적인 해설

우선 주제를 정한 후 구독을 받을 옵저버들을 add합니다!

이후 실행을 하게 되면 setMeasurements 메소드에서 notifyObservers 메소드를 호출하면서 각 옵저버 클래스의 update 메소드가 실행됩니다.

만약에 케이스 별로 구독자를 나눠야하면 remove를 걸어서 일부 구독자는 제외할 수 있을 겁니다.

✏️ <span style="color: red;">Subject 클래스와 Observer 클래스 간의 느슨한 결합으로 인해 자유롭게 Observer를 늘리고 줄일 수 있습니다!</span>

#### 활용 방안 정리

정리해서 생각해보면 다양한 경우에 옵저버 패턴을 활용 해볼 수 있을 것 같습니다.

1. 오픈마켓 상품 관리 > 상품이 구매되거나 취소되었을 때 제휴중인 각 오픈 마켓의 상품 재고를 반영한다.

2. 주식 관리 > 주가가 변경되었을 때 여러 증권사 시스템에 주가를 반영한다.

3. 로그 시스템 > 로그가 발생할 때 여러 타입(파일, 콘솔, DB 등)에 저장하도록 반영한다.

#### 기타 정리

1. 상황에 따라서 `private final ExecutorService executor = Executors.newCachedThreadPool(); // 스레드 풀 사용` 을 이용하여 비동기 방식으로 옵저버를 호출할수도 있습니다.

2. 자바에서 제공했었던 Observavle 클래스는 JAVA 9 이후로 쓰이지 않습니다!

---

다음에는 뭔가 쉬운 데코레이터 패턴으로 돌아오겠습니다!

# 긴 글 봐주셔서 감사합니다! 😌