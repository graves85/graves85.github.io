---
layout: content-layout
title: "느슨한 결합의 핵심! 팩토리 패턴 알아보기! 🏭"
date: 2025-03-08
categories: [DEV, 디자인패턴]
tags: [디자인패턴, Design pattern, 헤드퍼스트, GoF, 팩토리 패턴, Factory Pattern]
---

## 디자인 패턴 분석 목차

{% for post in site.categories["디자인패턴"] reversed %}
> {{ forloop.index }}: [{{ post.title }}]({{ post.url }})    
{% endfor %}

## 참고 서적

[헤드퍼스트 디자인패턴](https://product.kyobobook.co.kr/detail/S000001810483)

---

## 안녕하십니까! 😀

이번엔 4번째로 배우는 패턴은... 바로... 팩토리 패턴입니다!

대학생 시절부터 팩토리는 디자인 패턴 중 가장 기억에 남았던 거 같아요.

지금은 어떻게 썼는지 기억이 안나네요...

책을 보며 차근차근 파악해 봅시다!

---

옵저버 패턴을 배울 때 느슨한 결합에 대해 들어보셨을겁니다!

**관계가 느슨하면 유지보수성이 올라가 코드를 쉽게 수리할 수 있죠!**

보통 객체를 생성할 때 다음과 같이 생성하게 됩니다.

```
Duck duck = new MallardDuck();
```

굳이 다른 클래스에 저렇게 선언을 해서 사용하진 않죠...

팩토리 패턴은 굳이 저걸 다른 클래스에서 생성하여 사용합니다!

지금은 왜 굳이 귀찮게...🥴 라는 생각이 지배적일겁니다. 

귀찮지만 해놓으면 팩토리 패턴의 진가가 발휘되는 케이스가 있더라구요.

책에서는 new 연산자에 대해 다음과 같이 이야기하고 있습니다.

`new 연산자를 바로 사용하는 것은 변경에 닫혀 있는 코드이고 확장성을 배제한 코드이다.`

확장에 열려 있게 하려면 팩토리 패턴을 도입해보면 됩니다...!

말이 길어졌습니다... 🤐

팩토리 패턴은 크게 3가지로 나뉘는 데 차근 차근 한 번 보시죠... 😵‍💫

---

### ❇️심플 팩토리 패턴

심플 팩토리 패턴은 굉장히 간단한 팩토리 패턴이니 코드보면 바로 이해하기 쉬우실 겁니다.

```
public Pizza createPizza(String type) {
    Pizza pizza = null;

    if(type.equals("cheese")) {
        pizza = new CheesePizza();
    } else if(type.equals("pepperoni")) {
        pizza = new PepperoniPizza();
    }
}
```

위처럼 파라미터에 의해 Pizza를 맞춤형 하위 클래스로 생성하도록 구성하였습니다.

아까 언급한 느슨한 결합으로 인해 어떤 피자를 생성할지에 대한 유동적인 생성이 가능한 것이죠...!

🚨 <span style="color: red;">이건 아주 심플하니 쉬운 패턴인데 이제 다음 팩토리부터 모르시는 분들은 조금 머리 아프니 주의하세요...</span> 🥶

### ❇️팩토리 메소드 패턴

클래스 자체에서 팩토리 생성하는 건 알아봤으니 이제는 메소드로 생성하는 방법도 알아보셔야 합니다!

책에 나온 피자 가게를 토대로 우선 클래스 다이어그램을 보겠습니다.

![Imgur](https://i.imgur.com/IGwILgC.png)

피자 가게에 두 가지 유형의 피자 가게를 둔 예시입니다.

아까처럼 상위 클래스에서 단순 팩토리 패턴을 쓰면 될까싶지만... 추가 요건이 있습니다.

뉴욕 피자 가게는 뉴욕 스타일의 피자 4가지를 만들어야 하고... 

시카고 피자 가게는 시카고 스타일의 피자 4가지를 만들어야 한답니다... 😰

기존처럼 createPizza 메소드에서 처리하기에는 유형이 훨씬 더 늘어난거죠...!

그래서 위처럼 일단 뉴욕 스타일과 시카고 스타일로 캡슐화를 우선 진행했고 아래처럼 생성 메소드를 구현했습니다.

```
public class NYPizzaStore extends PizzaStore {

	Pizza createPizza(String item) {
		if (item.equals("cheese")) {
			return new NYStyleCheesePizza();
		} else if (item.equals("veggie")) {
			return new NYStyleVeggiePizza();
		} else if (item.equals("clam")) {
			return new NYStyleClamPizza();
		} else if (item.equals("pepperoni")) {
			return new NYStylePepperoniPizza();
		} else return null;
	}
}
```

```
public class ChicagoPizzaStore extends PizzaStore {

	Pizza createPizza(String item) {
        	if (item.equals("cheese")) {
            		return new ChicagoStyleCheesePizza();
        	} else if (item.equals("veggie")) {
        	    	return new ChicagoStyleVeggiePizza();
        	} else if (item.equals("clam")) {
        	    	return new ChicagoStyleClamPizza();
        	} else if (item.equals("pepperoni")) {
            		return new ChicagoStylePepperoniPizza();
        	} else return null;
	}
}
```

그리고 상위 클래스인 PizzaStore는 다음과 같은 구현되어 있죠.

```
public abstract class PizzaStore {
 
	abstract Pizza createPizza(String item);
 
	public Pizza orderPizza(String type) {
		Pizza pizza = createPizza(type);
		System.out.println("--- Making a " + pizza.getName() + " ---");
		pizza.prepare();
		pizza.bake();
		pizza.cut();
		pizza.box();
		return pizza;
	}
}
```

위처럼 팩토리 메소드 패턴은 객체를 생설할 때 필요한 인터페이스(추상 클래스)를 만들고 <span style="background-color:rgb(200, 200, 255);">**어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정**</span>하는 구조입니다.

참고로 저는 아직까지도 왜 팩토리 메소드 패턴과 명확하게 다른 점을 모르겠습니다.

그래서 차이점을 더 파보았더니 다음과 같은 내용이 있더군요.

<span style="color: red;">팩토리 메소드 패턴은 재사용을 할 수 있도록 일반적인 프레임워크를 제공할 수 있다.</span>

무슨 뜻이냐...

createPizza만 있는 단순 팩토리 패턴의 PizzaStore를 호출한다고 했을 때.. 호출부에서 생성된 피자로 여러 가지 코드 구현을 해야 합니다.

만약 처리 로직이 동일한 부분을 여러 번 호출해야 한다면 PizzaStore에 재사용 가능한 orderPizza 메소드를 만들어서 orderPizza만 호출하면 될 듯 합니다.

슈퍼 클래스가 처리를 하는 메소드가 생겼으니 생성은 밑에 서브 클래스 친구들한테 맡기는 구조가 된겁니다.

결론은... <span style="color: red;">재사용할 수 있는 메소드를 구현함으로써 생성부를 서브 클래스로 캡슐화하여 팩토리를 구현한다...</span>라고 보심 될 것 같습니다.

여기서 끝이 아닙니다...

한가지 끝판왕 팩토리 패턴이 또 있어요... 😭 ~~(집에 가고 싶다...)~~

### ❇️추상 팩토리 패턴

아까 추상화했는데 또 추상 나오니...?

뭐가 다를까... 막막할 수 있습니다...

그전에 알아두면 좋은 용어 한 번 보고 가시죠...

✏️ <span style="color: red;">의존성 뒤집기 원칙이란? 추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.</span>

~~(대체 무슨 소리래... 🦴)~~

**어려운 김에 어려운 말 조금 더 나갑니다...**

> 의존성 뒤집기 원칙을 지키는 방법

1. 변수에 구상 클래스의 레퍼런스를 저장하지 맙시다.

2. 구상 클래스에서 유도된 클래스를 만들지 맙시다.

3. 베이스 클래스에 이미 구현되어 있는 메소드를 오버라이드하지 맙시다.

위의 내용이 이해가 안되신다면.. 추상 팩토리 패턴에 녹여들어간 원칙이라고 보심 될 것 같습니다.

**위 두 가지 패턴보다 난이도가 1.5배정도 올라가니 한 번 잘 살펴보십시다...**

일단 예시에서 변경된 Pizza 클래스부터 보겠습니다.

AS-IS

```
public abstract class Pizza {
	String name;
	String dough;
	String sauce;
	ArrayList<String> toppings = new ArrayList<String>();
 
	void prepare() {
		System.out.println("Prepare " + name);
		System.out.println("Tossing dough...");
		System.out.println("Adding sauce...");
		System.out.println("Adding toppings: ");
		for (String topping : toppings) {
			System.out.println("   " + topping);
		}
	}
  
	// 이하 생략
}
```

TO-BE

```
public abstract class Pizza {
	String name;

	Dough dough;
	Sauce sauce;
	Veggies veggies[];
	Cheese cheese;
	Pepperoni pepperoni;
	Clams clam;

	abstract void prepare();

    // 이하 생략
}
```

Pizza 재료를 처리하는 prepare 메소드가 추상화로 변신을 일단 했습니다.

그 다음 prepare를 구현하는 하위 클래스를 한 번 보겠습니다.

AS-IS (피자 종류별로 클래스를 만들어서 처리했음)

```
public class NYStyleCheesePizza extends Pizza {

	public NYStyleCheesePizza() { 
		name = "NY Style Sauce and Cheese Pizza";
		dough = "Thin Crust Dough";
		sauce = "Marinara Sauce";
 
		toppings.add("Grated Reggiano Cheese");
	}
}
```

TO-BE (피자의 주 원재료별로 클래스를 만들어서 처리했음)

```
public class CheesePizza extends Pizza {
	PizzaIngredientFactory ingredientFactory;
 
	public CheesePizza(PizzaIngredientFactory ingredientFactory) {
		this.ingredientFactory = ingredientFactory;
	}
 
	void prepare() {
		System.out.println("Preparing " + name);
		dough = ingredientFactory.createDough();
		sauce = ingredientFactory.createSauce();
		cheese = ingredientFactory.createCheese();
	}
}
```

가장 크게 바뀐 점은 기존 피자 클래스에서는 속성을 지정하여 반환하고 끝이었습니다.

이제는 피자 클래스에 새로운 팩토리 클래스가 변수로 가지고 있음을 알 수 있습니다.

상황에 따라 변칙적인 치즈 피자로 만들 수 있겠군요. (확장성 업그레이드 완료)

그럼 아까 구현한 createPizza 메소드는 어떻게 바뀌는 걸까요?

뉴욕 스타일의 피자 가게 클래스를 한 번 살펴보시죠.

```
public class NYPizzaStore extends PizzaStore {
 
	protected Pizza createPizza(String item) {
		Pizza pizza = null;
		PizzaIngredientFactory ingredientFactory = 
			new NYPizzaIngredientFactory();
 
		if (item.equals("cheese")) {
  
			pizza = new CheesePizza(ingredientFactory);
			pizza.setName("New York Style Cheese Pizza");
  
		} else if (item.equals("veggie")) {
 
			pizza = new VeggiePizza(ingredientFactory);
			pizza.setName("New York Style Veggie Pizza");
 
		} else if (item.equals("clam")) {
 
			pizza = new ClamPizza(ingredientFactory);
			pizza.setName("New York Style Clam Pizza");
 
		} else if (item.equals("pepperoni")) {

			pizza = new PepperoniPizza(ingredientFactory);
			pizza.setName("New York Style Pepperoni Pizza");
 
		} 
		return pizza;
	}
}
```

`PizzaIngredientFactory ingredientFactory =	new NYPizzaIngredientFactory();` 이 부분이 보이시나요!?

원재료를 생성하는 클래스를 생성하여 가지고 있고 피자를 만들 때 이 팩토리 클래스를 인자로 넘겨주고 있습니다!

마지막으로 새로 생긴 PizzaIngredientFactory 이 팩토리와 이를 구현하고 있는 NYPizzaIngredientFactory 이 클래스를 한 번 살펴보시죠.

```
public interface PizzaIngredientFactory {
 
	public Dough createDough();
	public Sauce createSauce();
	public Cheese createCheese();
	public Veggies[] createVeggies();
	public Pepperoni createPepperoni();
	public Clams createClam();
 
}
```

```
public class NYPizzaIngredientFactory implements PizzaIngredientFactory {
 
	public Dough createDough() {
		return new ThinCrustDough();
	}
 
	public Sauce createSauce() {
		return new MarinaraSauce();
	}
 
	public Cheese createCheese() {
		return new ReggianoCheese();
	}
 
	public Veggies[] createVeggies() {
		Veggies veggies[] = { new Garlic(), new Onion(), new Mushroom(), new RedPepper() };
		return veggies;
	}
 
	public Pepperoni createPepperoni() {
		return new SlicedPepperoni();
	}

	public Clams createClam() {
		return new FreshClams();
	}
}
```

위에 보시는 것처럼 뉴욕 스타일에 맞는 소스, 치즈, 야채 등을 리턴하고 있음을 알 수 있습니다.

아마 저보다 이해력 좋으신 분들은 예제만 보고도 추상 팩토리 패턴과 팩토리 메소드 패턴의 차이점이 뭔지 이해되실 겁니다.

저는 여러 번의 이해와 노력 끝에 파악을 조금 했답니다... 😮‍💨

우선 추상 팩토리 패턴은 <span style="background-color:rgb(200, 200, 255);">**구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생산하는 인터페이스를 제공**</span>합니다.

아까 예제에 나왔던 PizzaIngredientFactory 클래스가 핵심 역할이라고 할 수 있죠.

느낌만 한 번 말씀드리면 

이전에 팩토리 메소드 패턴은 뭔가 PizzaStore 서브 클래스에서 직접 피자를 생산하여 고정된 재료로 만들었다고 치면

추상 팩토리 패턴은 이제 PizzaStore 서브 클래스 마저도 PizzaIngredientFactory한테 맡기고 재료도 그룹지어 종류별로 세분화하게 관리되는 느낌입니다.

### ❇️여기서 잠깐!!! 추상 팩토리 패턴의 장단점을 알아보자! (출처: GPT)

|장점|단점|
|----|----|
|객체 생성 로직을 캡슐화하여 클라이언트 코드 변경 없이 확장 가능|너무 많은 클래스 수 증가|
|클라이언트 코드가 구체적인 클래스에 의존하지 않음 → 결합도 낮아짐|새로운 개별 제품(예: 과일토핑 추가) 추가 시 인터페이스 및 서브 클래스 전부 변경 필요|

### ❇️추상 팩토리 패턴과 팩토리 메소드 패턴의 차이점 확인하기! (출처: GPT)

|구분|팩토리 메소드 패턴|추상 팩토리 패턴|
|----|----|----|
|초점|단일 객체의 생성을 캡슐화|관련된 여러 객체를 그룹으로 생성|
|확장성|새로운 객체 유형 추가 가능 (클래스 상속 활용)|새로운 제품군 추가 가능 (팩토리 인터페이스 확장)|
|코드 복잡도|비교적 간단|상대적으로 복잡|
|유지보수성|특정 객체에 대한 변경에 유리|여러 객체의 일관성을 유지하기 좋음|
|사용 사례|객체 생성을 위임하여 유연성을 확보하고 싶을 때|제품군 전체를 일관되게 관리해야 할 때|

### ❇️팩토리 메소드 패턴을 사용한 예시

1. 특정 타입의 데이터베이스 커넥션(MySQLConnection, PostgreSQLConnection)을 생성하는 경우

2. 특정 형태의 문서(PDFDocument, WordDocument)를 생성하는 경우

### ❇️추상 팩토리 패턴을 사용한 예시

1. GUI 라이브러리에서 Windows/MacOS UI 컴포넌트(Button, Checkbox, TextField 등)를 통일성 있게 생성하는 경우

2. 게임에서 서로 다른 종족(예: 엘프, 오크)의 유닛(Warrior, Archer, Mage 등)을 생성하는 경우

### ❇️결론

디자인 패턴을 무조건 쓴다고 해서 좋은 건 아니구나라는 것을 팩토리 패턴에게 좀 느꼈습니다.. ~~(물론 이해하기 어려워서 안쓰고 싶은 생각도 있습니다.)~~

---

다음에는 혼자가 좋은... 싱글턴 패턴을 뜯어봅시다!

# 긴 글 봐주셔서 감사합니다! 😌