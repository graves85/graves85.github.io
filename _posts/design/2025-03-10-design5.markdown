---
layout: content-layout
title: "단순한 것 같지만 헤깔리는 싱글턴 패턴 알아보기! 👤"
date: 2025-03-10
categories: [DEV, 디자인패턴]
tags: [디자인패턴, Design pattern, 헤드퍼스트, GoF, 싱글턴 패턴, Singleton Pattern]
---

## 디자인 패턴 분석 목차

{% for post in site.categories["디자인패턴"] reversed %}
> {{ forloop.index }}: [{{ post.title }}]({{ post.url }})    
{% endfor %}

## 참고 서적

[헤드퍼스트 디자인패턴](https://product.kyobobook.co.kr/detail/S000001810483)

---

## 안녕하십니까! 😀

이번엔 싱글턴 패턴을 배워볼까 합니다!

~~독서에 취약한 저에게는 책의 분량이 짧아 아주 좋았던 기억이 납니다... 🫠~~

클래스 다이어그램도 굳이 필요없어 보이는 패턴입니다!

한 번 들여다보시죠!

---

싱글턴 패턴은 예제 소스 보시면 아마 단박에 아실텐데요!

```
public class Singleton {
	private static Singleton uniqueInstance;

	private Singleton() {}

	public static Singleton getInstance() {
		if(uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}

	// 기타 메소드
}
```

싱글턴 패턴의 기본 구조는 위처럼 단 하나의 인스턴스를 관리하고 그 인스턴스를 호출 클래스에 보내줍니다!

<span style="color: red;">위같은 방식이면 Singleton이라는 클래스는 절대 2개 이상 생성할수가 없게 됩니다.</span>

단 static 메소드를 제공함으로써 해당 클래스에 어떠한 클래스도 접근은 가능하게 됩니다.

이렇게 내용이 끝나면 아주 간단하죠... 🫡

하지만 고민이 하나 있습니다.

바로 멀티스레딩으로 접근하게 되는 경우입니다... 음...

간단한 해결책은 아래와 같습니다!

### 방법 1. synchronized 동기화 메소드로 변경하기

```
public class Singleton {
	private static Singleton uniqueInstance;

	private Singleton() {}

	public static synchronized Singleton getInstance() {
		if(uniqueInstance == null) {
			uniqueInstance = new Singleton();
		}
		return uniqueInstance;
	}

	// 기타 메소드
}
```

바로 static 메소드에 synchronized라는 동기화 명령어를 붙이는거죠!

다른 스레드가 끝날때까지 해당 메소드에 접근을 기다립니다.

<span style="color: red;">단 위 방법은 접근을 하나의 스레드밖에 못하니 당연히 속도가 저하됩니다!</span>

그래서 다른 방법들이 또 있죠.

### 방법2. 인스턴스 객체 미리 생성하기

```
public class Singleton {
	private static Singleton uniqueInstance = new Singleton();

	private Singleton() {}

	public static Singleton getInstance() {
		return uniqueInstance;
	}
}
```

위처럼 변수 할당시에 생성까지 하는 방법입니다.

아마도 이 방법이 심플하니 많이 사용될 수 있겠네요.

하지만 책에는 한 가지 방법을 더 알려줍니다.

### 방법3. DCL을 사용하기

✏️ <span style="color: red;">DCL이란? Double-Checked Locking의 약자로 멀티스레드 환경에서 싱글톤(Singleton) 객체를 안전하게 생성하기 위해 사용하는 패턴이다.</span>

사용법은 아래와 같습니다.

```
public class Singleton {
	private volatile static Singleton uniqueInstance;

	private Singleton() {}

	public static Singleton getInstance() {
		if(uniqueInstance == null) {
			synchronized (Singleton.class) {
				if(uniqueInstance == null) {
					uniqueInstance = new Singleton();
				}
			}
		}
		return uniqueInstance;
	}

	// 기타 메소드
}
```

아마도.. 저게 뭐임...🥺? 이라고 생각하실수도 있습니다.

일단 변경점은 변수 부분에 volatile 키워드를 사용한 것입니다!

그리고 이제 메소드에서 `synchronized (Singleton.class)` 라는 동기화 블록을 설정합니다.

이렇게되면 uniqueInstance 변수가 변경되었을 때 다른 스레드도 변경됨을 인지하게 되니 uniqueInstance 값이 null이 아닌 것으로 인식하게 됩니다!

`volatile` 키워드.. 저도 자바 개발자로써 처음 알게 되었는데요...

무조건 이 키워드가 멀티스레딩 제어에 최강이냐? 그건 또 아닌 것 같습니다.

아래 예시를 한 번 보겠습니다.

```
class Counter {
    volatile int count = 0;

    void increment() {
        count++; // 이 연산은 원자적이지 않음
    }
}
```

위 클래스를 멀티 스레딩으로 돌리면 count가 순차적으로 오를까요!?

<span style="background-color:rgb(200, 200, 255);">**정답은 NO입니다.**</span>

volatile 키워드를 적용했음에도 `count++` 같이 **읽고 ➡️ 수정하고 ➡️ 쓰는** 복합 연산은 보장이 되지 않는다고 합니다.

따라서 volatile 키워드는 플래그에 따른 멀티스레딩 제어나 예시에 나왔던 싱글턴 패턴의 인스턴스 생성 정도로 쓰이는 게 적당할 듯 합니다.

### 방법4. enum 클래스를 활용하기 (추천 방식)

아마도.. 이게 최강 해결책일 듯 합니다. 🧐

```
public enum Singleton {
    INSTANCE; // 싱글턴 인스턴스

    // 실제 싱글턴 클래스의 메서드
    public void doSomething() {
        System.out.println("싱글턴 인스턴스 동작!");
    }
}
```

저 방식으로 이미 인스턴스가 하나 생성이 된 것이죠...

정리해보면 다음 장점이 있는 것입니다.

|장점|설명|
|----|----|
|가장 간단한 Singleton 구현|enum 선언만으로 Singleton 패턴을 보장|
|스레드 안전(Thread-safe) 보장|동기화 문제 없이 안전하게 사용할 수 있음|
|리플렉션(Reflection) 방어|enum은 리플렉션을 통한 객체 생성을 차단|
|직렬화(Serialization) 문제 없음|일반 Singleton 패턴에서는 Serializable을 구현해야 하지만, enum은 자동으로 직렬화 지원|

멀티스레딩 문제도 그냥 해결되고.. 굳이 소스 길어지지도 않고... 와...

## 너가 그냥 최강이구나...😘

그래도 다른 방법들도 알아두면 JAVA가 얼마나 발전했는가에 대한 역사 공부정도는 되지 않았을까라는... 생각을 가져봅니다.

### 싱글턴 패턴은 어디에 쓰일까?

1. 데이터베이스 연결 관리

2. 로깅 시스템

3. 캐싱 시스템

4. 스레드 풀 관리

### 결론

**싱글턴 패턴은 전역으로 상태를 관리할 때 적합하다!**

**싱글턴 패턴에 enum 클래스를 활용하면 손쉽고 안전하게 만들 수 있다!**

이상입니다!

---

다음에는 요청 내역을 캡슐화하는 커맨드 패턴을 알아봅시다!

# 긴 글 봐주셔서 감사합니다! 😌