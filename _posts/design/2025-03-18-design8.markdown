---
layout: content-layout
title: "템플릿을 만들어 캡슐화시켜버리는 템플릿 메소드 패턴 알아보기! 📔"
date: 2025-03-18
categories: [DEV, 디자인패턴]
tags: [디자인패턴, Design pattern, 헤드퍼스트, GoF, 템플릿 메소드 패턴, Template Method Pattern]
---

## 디자인 패턴 분석 목차

{% for post in site.categories["디자인패턴"] reversed %}
> {{ forloop.index }}: [{{ post.title }}]({{ post.url }})    
{% endfor %}

## 참고 서적

[헤드퍼스트 디자인패턴](https://product.kyobobook.co.kr/detail/S000001810483)

---

## 안녕하십니까! 😀

이번엔 템플릿 메소드 패턴에 대해 알아봅시다!

직장 생활을 하다보면 PPT나 위키 작성할 때 템플릿을 짜두면 편할때가 있습니다.

코딩할 때도 이런 생각을 했어야 했는데... 무지했군요... 🫥

이번에 이 패턴을 익혀둬서 어려운 알고리즘도 가독성 좋게 만들 수 있도록 노력해봅시다!

---

###  템플렛 메소드 패턴 살펴보기

책에서는 다음과같은 예시가 나와 있습니다.

카페에 커피와 홍차를 판매하는 데 레시피가 나와 있습니다.

두 음료의 레시피는 거의 비슷한데요! 🤔

이 경우 커피와 홍차의 상위 클래스를 다음과 같이 구현할 수 있습니다!

```
public abstract class CaffeineBeverage {
  
    // 레시피 메소드
	final void prepareRecipe() {
		boilWater();
		brew();
		pourInCup();
		addCondiments();
	}
 
	abstract void brew(); // 우려내기 (각자)
  
	abstract void addCondiments(); // 재료 추가 (각자)
 
	void boilWater() { // 물 끓이기 (공통)
		System.out.println("Boiling water");
	}
  
	void pourInCup() { // 컵 따르기 (공통)
		System.out.println("Pouring into cup");
	}
}
```

위 클래스의 핵심 메소드는 바로 prepareRecipe 메소드인데요!

final로 선언하여 오버라이드를 할 수 없고 앞으로 이 메소드를 호출하면 음료를 제조할 수 있게 됩니다!

하위 클래스는 다음과 같이 구성되겠죠!?

```
public class Coffee extends CaffeineBeverage {
	public void brew() {
		System.out.println("Dripping Coffee through filter");
	}
	public void addCondiments() {
		System.out.println("Adding Sugar and Milk");
	}
}
```

```
public class Tea extends CaffeineBeverage {
	public void brew() {
		System.out.println("Steeping the tea");
	}
	public void addCondiments() {
		System.out.println("Adding Lemon");
	}
}
```

보시면 홍차와 커피 클래스는 각각 추상 메소드를 구현하고 있습니다.

클래스 다이어그램으로 마무리를 해보실까요?

![Imgur](https://i.imgur.com/fnKFdu7.png)

템플릿을 구성한 상위 클래스만 잘 살펴보시면 되겠습니다. 🥴

✏️ <span style="color: red;">**CaffeineBeverage 클래스의 prepareRecipe 메소드가 곧 템플릿입니다!**</span>

그리고 각 단계를 메소드로 나누고 표현하게 구성합니다!

다시 한 번 정리해보면

✏️ <span style="color: red;">**템플릿 메소드 패턴은 알고리즘의 골격을 정의하고 알고리즘의 구조는 그대로 유지하면서 특정 단계만 서브클래스에서 재정의하게 할 수 있는 패턴입니다.**</span>

사실... 템플릿 메소드 패턴은 이게 다입니다...😮‍💨 쉬운 편이죠...? 😲

여기서 이제 조금만 더 조미료를 첨가해봅시다.

템플릿 메소드 패턴에는 <span style="background-color:rgb(200, 200, 255);">**후크**</span>라는 개념이 있는데요!

예시용 소스를 먼저 보시죠!

```
public abstract class CaffeineBeverageWithHook {
 
	final void prepareRecipe() {
		boilWater();
		brew();
		pourInCup();
		if (customerWantsCondiments()) {
			addCondiments();
		}
	}
 
	abstract void brew();
 
	abstract void addCondiments();
 
	void boilWater() {
		System.out.println("Boiling water");
	}
 
	void pourInCup() {
		System.out.println("Pouring into cup");
	}
 
	boolean customerWantsCondiments() {
		return true;
	}
}
```

기존 소스에서 customerWantsCondiments 메소드가 추가됬습니다!

customerWantsCondiments 메소드는 하는 일이 없는데 왜 추가한걸까?

그것은 바로 서브클래스를 위한 선택적 메소드로 보시면 됩니다!

서브클래스에서 추가로 로직이 필요할 때 저렇게 HOOK(후크) 메소드를 넣어놓으면 편리하게 추가할 수 있다고 합니다.

###  새로운 디자인 원칙 배우기

템플릿 메소드 패턴은 <span style="background-color:rgb(200, 200, 255);">**할리우드 원칙**</span>을 가지고 있다고 하는데요!

✏️ <span style="color: red;">**할리우드 원칙이란? 의존성이 부패되는 것을 방지하고 구성 요소를 어떻게 사용할지 상위 구성 요소가 결정한다.**</span>

쉽게 얘기해서 복잡하게 의존성이 꼬이는 것을 지양해야 한다는 말로 보입니다.

###  템플릿 메소드 패턴을 사용한 사례는?

1. JAVA ARRAYS 메소드에 구현된 정렬 메소드 
```
public class Duck implements Comparable<Duck> {
	String name;
	int weight;
  
	public Duck(String name, int weight) {
		this.name = name;
		this.weight = weight;
	}
 
	public String toString() {
		return name + " weighs " + weight;
	}
  
	public int compareTo(Duck otherDuck) {
 
  
		if (this.weight < otherDuck.weight) {
			return -1;
		} else if (this.weight == otherDuck.weight) {
			return 0;
		} else { // this.weight > otherDuck.weight
			return 1;
		}
	}
}
```
Comparable가 객체 정렬을 할 수 있는 메소드를 제공해 줄 것입니다!

2. 스프링 프레임워크의 AbstractApplicationContext

3. 게임 개발에서 템플릿 메소드 패턴 적용 (게임 캐릭터의 공격 행동 등)

4. 웹 프레임워크에서 HTTP 요청 처리

5. 데이터 처리 파이프라인

이 외에도 굉장히 많은 곳에서 응용해볼 수 있는 패턴으로 보입니다!


---

다음에는 컬렉션 담당 패턴인 반복자 패턴과 컴포지트 패턴에 대해 보겠습니다!

# 긴 글 봐주셔서 감사합니다! 😌